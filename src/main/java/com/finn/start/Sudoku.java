package com.finn.start;

//数独判定
public class Sudoku {

    public static void main(String[] args) {

        char[][] board =
                { {'5', '3', '.', '.', '7', '.', '.', '.', '.'}
                , {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
                , {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
                , {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
                , {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
                , {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
                , {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
                , {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
                , {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
                };


    }

    public boolean isValidSudoku(char[][] board) {
        //        判定数组的正则表达式
        ///([1-9])[.1-9]*\1|([1-9])(?:[\n.1-9]{10})*[\n.1-9]{9}\2|^(?:(?:[.1-9]{9}\n){3})*(?:[.1-9]{3})*[.1-9]{0,2}([1-9])(?:[.1-9]?|[.1-9]{0,2}(?:\n[.1-9]{6}|[.1-9]{3}\n[.1-9]{3}|[.1-9]{6}\n)(?:[\n.1-9]{10})?)[.1-9]{0,2}\3|^(?:(?:[.1-9]{9}\n){3})*[.1-9]{9}\n(?:[.1-9]{3})*[.1-9]{0,2}([1-9])(?:[.1-9]?|[.1-9]{0,2}(?:\n[.1-9]{6}|[.1-9]{3}\n[.1-9]{3}|[.1-9]{6}\n))[.1-9]{0,2}\4/

        for (int i = 0; i <board.length ; i++) {
            for (int j = 0; j < board[i].length ; j++) {

            }
        }

        return true;

    }


}
